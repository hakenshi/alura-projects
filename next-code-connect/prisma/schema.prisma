generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id         Int       @id @default(autoincrement())
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  cover      String
  title      String
  slug       String    @unique
  body       String
  markdown   String
  comments   Comment[]
  likes      Int       @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Comment {
  id         Int       @id @default(autoincrement())
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  postId     Int
  post       Post      @relation(fields: [postId], references: [id])
  parentId   Int?
  parent     Comment?  @relation("CommentChildren", fields: [parentId], references: [id])
  text       String
  created_at DateTime  @default(now())
  update_ad  DateTime  @updatedAt
  children   Comment[] @relation("CommentChildren")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?   @unique
  avatar        String?
  email         String?   @unique
  emailVerified String?
  image         String?
  post          Post[]
  Comments      Comment[]
  Account       Account[]
  Session       Session[]
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
